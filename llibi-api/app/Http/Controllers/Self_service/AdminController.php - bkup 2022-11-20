<?php

namespace App\Http\Controllers\Self_service;

use App\Http\Controllers\Controller;
use App\Http\Controllers\NotificationController;

use Illuminate\Http\Request;

use App\Models\Self_service\Client;
use App\Models\Self_service\ClientRequest;
use App\Models\Self_service\Complaints;
use App\Models\Self_service\Sync;

use Illuminate\Support\Facades\DB;

class AdminController extends Controller
{
    public function SearchRequest($search, $id)
    {
        $request = DB::table('app_portal_clients as t1')
            ->join('app_portal_requests as t2', 't2.client_id', '=', 't1.id')
            ->select('t1.id', 't1.reference_number as refno', 't1.email as email', 't1.contact as contact', 't1.member_id as memberID', 't1.first_name as firstName', 't1.last_name as lastName', 't1.dob as dob', 't1.is_dependent as isDependent', 't1.dependent_member_id as depMemberID', 't1.dependent_first_name as depFirstName', 't1.dependent_last_name as depLastName', 't1.dependent_dob as depDob', 't1.remarks as remarks', 't1.status as status', 't2.loa_type as loaType', 't2.loa_number as loaNumber', 't2.approval_code as approvalCode', 't2.loa_attachment as loaAttachment', 't2.complaint as complaint', 't2.lab_attachment as labAttachment', 't2.assessment_q1 as ass1', 't2.assessment_q2 as ass2', 't2.assessment_q3 as ass3', 't1.created_at as createdAt', 't2.provider_id as providerID', 't2.provider as providerName', 't2.doctor_id as doctorID', 't2.doctor_name as doctorName', 't2.diagnosis as diagnosis')
            ->whereIn('t1.status', [2, 3, 4, 5])
            ->where(function ($query) use ($search, $id) {
                if($search != 0) 
                {
                    $query->orWhere('t1.member_id', 'like', '%'.strtoupper($search).'%');
                    $query->orWhere('t1.first_name', 'like', '%'.strtoupper($search).'%');
                    $query->orWhere('t1.last_name', 'like', '%'.strtoupper($search).'%');

                    $query->orWhere('t1.dependent_member_id', 'like', '%'.strtoupper($search).'%');
                    $query->orWhere('t1.dependent_first_name', 'like', '%'.strtoupper($search).'%');
                    $query->orWhere('t1.dependent_last_name', 'like', '%'.strtoupper($search).'%');
                }
                if(is_array($id)){
                    $query->where('t1.id', $id['val']);
                } else {
                    if($id != 0) {
                        $query->where('t1.status', $id);
                    }
                }
            })
            ->orderBy('t1.id', 'ASC')
            ->get();

        return $request;
    }

    public function UpdateRequest(Request $request)
    {
        $status = (int)$request->status;
        $updateClient = Client::where('id', $request->id)
            ->update([
                'status' => $status, 
                'remarks' => (isset($request->disapproveRemarks) ? strtoupper($request->disapproveRemarks) : '')
            ]);
        
        $update = [];
        if((int)$request->status == 3) {
            $title = strtoupper($request->loaNumber);
            $this->validate($request, [
                'attachLOA' => 'required|mimes:pdf',
            ]);

            $path = request('attachLOA')->storeAs('Portal/Attachment/'.$this->clean($title), request('attachLOA')->getClientOriginalName(), 'public');

            $update = [
                'loa_attachment' => 'storage/'.$path,
                'loa_number' => strtoupper($request->loaNumber),
                'approval_code' => strtoupper($request->approvalCode)
            ];

            $updateRequest = ClientRequest::where('client_id', $request->id)
            ->update($update);
        }

        $client = $this->SearchRequest(0, ['val' => $request->id]);
        $allClient = $this->SearchRequest(0, 2);

        //SendNotification
        $dataSend = [
            'refno' => $client[0]->refno,
            'remarks' => $request->disapproveRemarks,
            'status' => $status,
        ];

        $this->sendNotification(array_merge($dataSend, $update), $client[0]->firstName.' '.$client[0]->lastName, $client[0]->email, $client[0]->contact);

        return array('client' => $client, 'all' => $allClient);
    }

    function removePastValue($in, $before) {
        $pos = strpos($in, $before);
        return $pos !== FALSE
            ? substr($in, $pos + strlen($before), strlen($in))
            : "";
    }

    function clean($string) {
        $string = str_replace(' ', '-', $string); // Replaces all spaces with hyphens.
        return preg_replace('/[^A-Za-z0-9\-]/', '', $string); // Removes special chars.
    }

    private function sendNotification($data, $name, $email, $contact)
    {
        $name = ucwords(strtolower($name));
        $remarks = $data['remarks'];
        $ref = $data['refno'];

        $loanumber = (!empty($data['loa_number']) ? $data['loa_number'] : '' );
        $approvalcode = (!empty($data['approval_code']) ? $data['approval_code'] : '' );

        if(!empty($email)) {

            $attachment = [];
            if($data['status'] == 3) {
                $attach = $data['loa_attachment'];
                //$path = storage_path('app/public').str_replace('storage', '', $attach);
                $path = str_replace('storage', 'public', $attach);
                $attachment = [$path];
            } 

            $numbers = $data['status'] === 3 ? "LOA #: <b>$loanumber</b> <br /> Approval Code: <b>$approvalcode</b>" : '';

            if($data['status'] === 3) {
                $statusRemarks = '<b>Approved</b>';
            } else {
                $statusRemarks = '<b>Disapproved</b> with remarks: '.$remarks;
            }

            $mailMsg = 
            '<p style="font-weight:normal;">
                Hi <b>'.$name.',</b><br /><br />
                Your request has been '.$statusRemarks.'
                <br /><br />
                Reference Number: <b>'.$ref.'</b>.<br />
                '.$numbers.'
                <br /><br />
                Thank you!
            </p>';

            $body = array('body' => $mailMsg, 'attachment' => $attachment);
            $mail = (new NotificationController)->MailNotification($name, $email, $body);
        }

        if(!empty($contact)) {
            if($data['status'] === 3) {
                $sms = 
                "Hi $name, \n\nYour request has been approved, we already sent you an email attached your LOA to the email address you provided. \n\n Below are your tracking numbers: \n REF #: $ref \n LOA #: $loanumber \n APP #: $approvalcode \n\n Thank you!";
            } else {
                $sms = 
                "Hi $name, \n\nYour request has been disapproved with remarks: $remarks \n\nRef #: $ref \n\nThank you!";
            }
            $sms = (new NotificationController)->SmsNotification($contact, $sms);
        }
    }
}
